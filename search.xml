<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring-dbunit使用指南</title>
    <url>/posts/f363124e/</url>
    <content><![CDATA[<h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><p>​    帮助你些一个可以多次重复运行且不依赖数据库现在数据的单元测试。<br>​    官方文档：<a href="https://springtestdbunit.github.io/spring-test-dbunit/index.html" target="_blank" rel="noopener">传送门</a></p>
<h3 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><p>​    具体版本视自己项目情况定义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.springtestdbunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test-dbunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dbunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dbunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="代码配置：基于现有可运行的单元测试的基础上，增加-TestExecutionListeners配置，如代码所示："><a href="#代码配置：基于现有可运行的单元测试的基础上，增加-TestExecutionListeners配置，如代码所示：" class="headerlink" title="代码配置：基于现有可运行的单元测试的基础上，增加@TestExecutionListeners配置，如代码所示："></a>代码配置：基于现有可运行的单元测试的基础上，增加@TestExecutionListeners配置，如代码所示：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@DbUnitConfiguration</span>(databaseConnection=&#123;<span class="string">"customDataSource"</span>)</span><br><span class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">DbUnitTestExecutionListener</span>.<span class="title">class</span>&#125;)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>DependencyInjectionTestExecutionListener</strong>：负责注入单元测试中使用到的依赖。</li>
<li><strong>DbUnitTestExecutionListener</strong>：负责处理dbunit相关注解（见3、主要功能说明）。</li>
<li><strong>DbUnitConfiguration</strong>:  检查自己的dataSource的beanName，如果属于{“dbUnitDatabaseConnection”, “dataSource”}其中之一，可省略这个配置，否则需要加上，配置自己的beanName。</li>
</ul>
<p><strong>注：{“dbUnitDatabaseConnection”, “dataSource”}为dbunit默认去springContext中加载dataSource时使用的beanName。</strong></p>
<h4 id="3、主要功能说明"><a href="#3、主要功能说明" class="headerlink" title="3、主要功能说明"></a>3、主要功能说明</h4><ul>
<li><strong>@DatabaseSetup</strong> - 在testMethod执行之前会执行@DatabaseSetup，用于初始化测试数据<ul>
<li>connection - 连接的数据源，单数据源可不配置</li>
<li>type - 操作类型，参考DatabaseOperation枚举</li>
<li>value - 数据xml</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatabaseSetup的DatabaseOperation默认值是CLEAN_INSERT，即清空表再插入数据，</span></span><br><span class="line"><span class="comment">//  明显与我们需求不符，配置成DatabaseOperation.INSERT即可。</span></span><br><span class="line"><span class="meta">@DatabaseSetup</span>(value =  <span class="string">"classpath:biz_info.xml"</span>,type = DatabaseOperation.INSERT)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@DatabaseTearDown</strong> -  在testMethod执行之后会执行@DatabaseTearDown，用于回滚删除测试数据<br>配置项与@DatabaseSetup一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DatabaseTearDown的DatabaseOperation默认值为CLEAN_INSERT，即删除插入的数据。</span></span><br><span class="line"><span class="meta">@DatabaseTearDown</span>(<span class="string">"classpath:biz_info.xml"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@ExpectedDatabase</strong> -  在testMethod执行之后会执行@ExpectedDatabase，早于@DatabaseTearDown用于测试结果校验（<em>比较的是数据库中当前的记录和xml中配置的数据值是否完全一致，有点鸡肋</em>）<ul>
<li>connection - 连接的数据源，单数据源可不配置</li>
<li>value - 数据xml</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较的是数据库的值和xml中配置的数据值，有点鸡肋</span></span><br><span class="line"><span class="meta">@ExpectedDatabase</span>(<span class="string">"classpath:result.xml"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h4><ul>
<li><p>如何配置回滚</p>
<ol>
<li>修改<strong><em>DbUnitTestExecutionListener</em></strong>为<strong><em>TransactionDbUnitTestExecutionListener。</em></strong></li>
<li>加上<strong><em>@Transactional</em></strong>注解。</li>
<li>在method上配置<strong>@DatabaseTearDown，</strong>标明要回滚删除哪些数据。</li>
</ol>
</li>
<li><p>多数据源如何配置</p>
<ol>
<li>测试类上配置@DbUnitConfiguration(databaseConnection={“customDataSource”,”dataSource”})</li>
<li>在method上使用@DatabaseTearDown|@DatabaseSetUp|@ExpectedDatabase时加上connection配置,指定dataSource</li>
</ol>
</li>
</ul>
<p><strong>例：@DatabaseTearDown(connection = “dataSource”,value=”classpath:biz_info.xml”)**</strong></p>
<hr>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:daoApplicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@DbUnitConfiguration</span>(databaseConnection = &#123;<span class="string">"dateSource"</span>&#125;)</span><br><span class="line"><span class="meta">@TestExecutionListeners</span>(&#123;DependencyInjectionTestExecutionListener<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">        <span class="title">TransactionDbUnitTestExecutionListener</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DistributeConfigTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BizInfoDAO bizInfoDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DatabaseSetup</span>(value =  <span class="string">"classpath:biz_info.xml"</span>,type = DatabaseOperation.INSERT)</span><br><span class="line">    <span class="meta">@DatabaseTearDown</span>(connection = <span class="string">"dateSource"</span>,value = <span class="string">"classpath:biz_info.xml"</span>)</span><br><span class="line">    <span class="meta">@ExpectedDatabase</span>(connection = <span class="string">"dateSource"</span>,value = <span class="string">"classpath:result.xml"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_findAllBizInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;BizInfoPO&gt; bizInfoList = bizInfoDAO.findAll();</span><br><span class="line"></span><br><span class="line">        assertNotNull(bizInfoList);</span><br><span class="line">        assertEquals(<span class="number">2</span>,bizInfoList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>biz_info.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- biz_info为表名，后面是字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">biz_info</span>  <span class="attr">delete_mark</span>=<span class="string">"0"</span> <span class="attr">biz_code</span>=<span class="string">"a"</span> <span class="attr">biz_name</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">biz_info</span>  <span class="attr">delete_mark</span>=<span class="string">"0"</span> <span class="attr">biz_code</span>=<span class="string">"b"</span> <span class="attr">biz_name</span>=<span class="string">"b"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>result.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">biz_info</span>  <span class="attr">delete_mark</span>=<span class="string">"0"</span> <span class="attr">biz_code</span>=<span class="string">"a"</span> <span class="attr">biz_name</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">biz_info</span>  <span class="attr">delete_mark</span>=<span class="string">"0"</span> <span class="attr">biz_code</span>=<span class="string">"b"</span> <span class="attr">biz_name</span>=<span class="string">"b"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>unit-test</category>
      </categories>
      <tags>
        <tag>dbUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>创建型-单例模式</title>
    <url>/posts/545bbc59/</url>
    <content><![CDATA[<h4 id="为什么要使用单例模式"><a href="#为什么要使用单例模式" class="headerlink" title="为什么要使用单例模式"></a>为什么要使用单例模式</h4><ul>
<li>解决共享变量问题</li>
<li>资源重复创建的浪费资源问题</li>
<li>有些数据在系统中只应该保存一份，就比较适合设计为单例类</li>
</ul>
<h4 id="如何实现一个单例"><a href="#如何实现一个单例" class="headerlink" title="如何实现一个单例"></a>如何实现一个单例</h4><ul>
<li>构造函数private</li>
<li>创建对象时是否延迟加载</li>
<li>创建对象时是否线程安全</li>
<li>获取对象时性能是否高</li>
</ul>
<h4 id="单例的几种实现方式"><a href="#单例的几种实现方式" class="headerlink" title="单例的几种实现方式"></a>单例的几种实现方式</h4><ul>
<li><strong>饿汉式</strong>：饿汉式的实现方式，在类加载的期间，就已经将 instance 静态实例初始化好了，所以，instance 实例的创建是线程安全的。不过，这样的实现方式不支持延迟加载实例。</li>
<li><strong>懒汉式</strong>：懒汉式相对于饿汉式的优势是支持延迟加载。这种实现方式会导致频繁加锁、释放锁，以及并发度低等问题，频繁的调用会产生性能瓶颈。</li>
<li><strong>双检锁</strong>：双重检测实现方式既支持延迟加载、又支持高并发的单例实现方式。只要 instance 被创建之后，再调用 getInstance() 函数都不会进入到加锁逻辑中。所以，这种实现方式解决了懒汉式并发度低的问题。</li>
<li><strong>静态内部类</strong>：利用 Java 的静态内部类来实现单例。这种实现方式，既支持延迟加载，也支持高并发，实现起来也比双重检测简单。</li>
<li><strong>枚举</strong>：最简单的实现方式，基于枚举类型的单例实现。这种实现方式通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。</li>
</ul>
<h4 id="单例存在的问题"><a href="#单例存在的问题" class="headerlink" title="单例存在的问题"></a>单例存在的问题</h4><ul>
<li>单例对OOP 特性的支持不友好</li>
<li>单例会隐藏类之间的依赖关系</li>
<li>单例对代码的扩展性不友好</li>
<li>单例对代码的可测试性不友好</li>
<li>单例不支持有参数的构造函数</li>
</ul>
<h4 id="单例的替代解决方案"><a href="#单例的替代解决方案" class="headerlink" title="单例的替代解决方案"></a>单例的替代解决方案</h4><p>为了保证全局唯一，除了使用单例，我们还可以用静态方法来实现。不过，静态方法这种实现思路，并不能解决我们之前提到的问题。如果要完全解决这些问题，我们可能要从根上，寻找其他方式来实现全局唯一类了。比如，通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证，由程序员自己来保证（自己在编写代码的时候自己保证不要创建两个类对象）。</p>
<h4 id="集群下的单例模式"><a href="#集群下的单例模式" class="headerlink" title="集群下的单例模式"></a>集群下的单例模式</h4><p>我们需要把这个单例对象序列化并存储到外部共享存储区（比如文件）。进程在使用这个单例对象的时候，需要先从外部共享存储区中将它读取到内存，并反序列化成对象，然后再使用，使用完成之后还需要再存储回外部共享存储区。</p>
<p>为了保证任何时刻，在进程间都只有一份对象存在，一个进程在获取到对象之后，需要对对象加锁，避免其他进程再将其获取。在进程使用完这个对象之后，还需要显式地将对象从内存中删除，并且释放对对象的加锁。</p>
]]></content>
      <categories>
        <category>design-pattern</category>
      </categories>
      <tags>
        <tag>create</tag>
      </tags>
  </entry>
</search>
